# Kitty Configuration - DWM-style Layout and Keybindings

# ============================================================================
# APPEARANCE
# ============================================================================

# Font
font_family      MesloLGS Nerd Font Mono
font_size        17

# Theme - Oceanic Next
include ~/.config/kitty/oceanic-next.conf

# Cursor
cursor_shape block
cursor_blink_interval 0

# Window
window_padding_width 0
hide_window_decorations no
window_border_width 1pt
active_border_color #6699CC
inactive_border_color #343D46
draw_minimal_borders no

# Tab bar
tab_bar_edge top
tab_bar_min_tabs 1
tab_bar_style powerline
tab_powerline_style slanted
tab_title_template "{index}: {title}"

# ============================================================================
# LAYOUTS - DWM-Style Master/Stack Tiling
# ============================================================================

# Enable Tall layout (master on left, stack on right) similar to DWM
# bias=55 means master takes 55% of width (like DWM's mfact=0.55)
# full_size=1 means one master window
enabled_layouts tall:bias=55;full_size=1,fat:bias=55;full_size=1,stack

# ============================================================================
# DWM-STYLE KEYBINDINGS
# ============================================================================
# Using cmd (âŒ˜) as MODKEY since macOS doesn't have Super key

# Clear all default keybindings first
clear_all_shortcuts yes

# ---------- Window Management (DWM: j/k/h/l) ----------
# Focus next/previous window (DWM: j/k for focusstack)
map cmd+j next_window
map cmd+k previous_window

# Resize master/slave area (DWM: h/l for setmfact)
map cmd+h resize_window narrower 3
map cmd+l resize_window wider 3

# Move window to master / zoom (DWM: Space for zoom)
map cmd+space move_window_to_top

# New window in current tab (DWM: Return for spawn terminal)
map cmd+return new_window_with_cwd
map cmd+n new_window

# Launch Claude in new window with current working directory
map cmd+shift+a launch --type=window --cwd=current zsh -i -c "claude"

# Kill window (DWM: q for killclient) - confirms if process running
map cmd+w close_window_with_confirmation ignore-shell

# Fullscreen toggle (DWM: f for togglefullscr)
map cmd+shift+f toggle_fullscreen

# ---------- Layout Management ----------
# Cycle through layouts (DWM: Shift+t/m/f for setlayout)
map cmd+shift+l next_layout

# Equalize window sizes
map cmd+e resize_window reset

# ---------- Font Size ----------
map cmd+plus change_font_size all +1.0
map cmd+equal change_font_size all +1.0
map cmd+minus change_font_size all -1.0
map cmd+0 change_font_size all 0

# ---------- Tab Management (DWM Tags/Workspaces) ----------
# Switch to tab N (DWM: 1-9 for view tag)
map cmd+1 goto_tab 1
map cmd+2 goto_tab 2
map cmd+3 goto_tab 3
map cmd+4 goto_tab 4
map cmd+5 goto_tab 5
map cmd+6 goto_tab 6
map cmd+7 goto_tab 7
map cmd+8 goto_tab 8
map cmd+9 goto_tab 9

# New tab (DWM doesn't have this, but useful)
map cmd+t new_tab

# Close tab (extension of window management)
map cmd+shift+w close_tab

# ---------- Additional Navigation ----------
# Move window forward/backward in stack
map cmd+shift+j move_window_forward
map cmd+shift+k move_window_backward

# ---------- Copy/Paste ----------
map cmd+c copy_to_clipboard
map cmd+v paste_from_clipboard

# ---------- Scrolling ----------
map page_up scroll_page_up
map page_down scroll_page_down
map home scroll_home
map end scroll_end
# Vim-style scrolling (only when not in nvim)
map ctrl+u scroll_page_up
map ctrl+d scroll_page_down

# ---------- Kitty Management ----------
# Command history search
map cmd+r launch --type=overlay --allow-remote-control zsh -i -c "cmd=\$(cat ~/.zsh_history | sed 's/^: [0-9]*:[0-9]*;//' | awk '!seen[\$0]++' | fzf --tac --print-query | tail -1) && [ -n \"\$cmd\" ] && kitten @ send-text --match state:overlay_parent \"\$cmd\\r\""

# Reload config
map cmd+shift+r load_config_file

# Toggle tab bar
map cmd+b toggle_tab_bar

# Kitty shell for debugging
map cmd+shift+escape kitty_shell window

# Quit kitty (session saved automatically)
map cmd+q quit

# ---------- Search ----------
map cmd+shift+x show_scrollback

# ---------- FZF Integrations ----------
# Find in files (ripgrep) - opens in neovim
map cmd+f launch --type=overlay --cwd=current zsh -i -c "file=\$(rg --line-number --color=always --smart-case . 2>/dev/null | fzf --ansi --delimiter : --preview 'bat --color=always --highlight-line {2} {1}' --preview-window '+{2}/2' | cut -d: -f1-2) && [ -n \"\$file\" ] && exec nvim +\$(echo \$file | cut -d: -f2) \$(echo \$file | cut -d: -f1)"
# Search scrollback with fzf - copies selection to clipboard
map cmd+shift+h launch --type=overlay --stdin-source=@screen_scrollback zsh -c "fzf --no-sort --no-mouse | pbcopy"

# Quick file finder - opens in neovim
map cmd+p launch --type=overlay --cwd=current zsh -i -c "file=\$(fzf --preview 'bat --color=always {}') && [ -n \"\$file\" ] && exec nvim \"\$file\""

# Git TUI (lazygit)
map cmd+shift+g launch --type=overlay --cwd=current lazygit

# Directory jumper (requires zoxide)
map cmd+shift+z launch --type=overlay --allow-remote-control zsh -i -c "dir=\$(zoxide query -l | fzf) && [ -n \"\$dir\" ] && kitten @ launch --type=tab --cwd \"\$dir\""

# SSH TUI (sshs) - opens in new tab
map cmd+shift+s launch --type=tab --cwd=current sshs -e

# ---------- Kitten Hints (URL/Path Selection) ----------
# Open URL in browser
map cmd+u kitten hints --type url --hints-foreground-color black --hints-background-color yellow
# Insert path at cursor
map cmd+shift+p kitten hints --type path --program - --hints-foreground-color black --hints-background-color yellow
# Open path in nvim
map cmd+shift+o kitten hints --type path --program "nvim" --hints-foreground-color black --hints-background-color yellow
# Copy line to clipboard
map cmd+shift+y kitten hints --type line --program @ --hints-foreground-color black --hints-background-color yellow

# ============================================================================
# BEHAVIOR
# ============================================================================

# Remote control (needed for kitty @ commands)
allow_remote_control yes

initial_window_width 100c
initial_window_height 40c

# Shell integration (enabled for process detection, no-cursor prevents apps from changing cursor shape)
shell_integration enabled no-cursor

# Confirm before closing OS window with running processes
confirm_os_window_close 1

# Bell
enable_audio_bell yes
window_alert_on_bell yes

# Mouse
focus_follows_mouse no
mouse_hide_wait 3.0

# Scrollback
scrollback_lines 100000

# macOS specific
macos_option_as_alt left
macos_titlebar_color background
macos_quit_when_last_window_closed yes
